"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import type { Message } from "@/types/message"
import type { Character } from "@/types/character"
import { ChatHeader } from "@/components/chat/chat-header"
import { ChatCharacterInfo } from "@/components/chat/chat-character-info"
import { ChatMessage } from "@/components/chat/chat-message"
import { TypingIndicator } from "@/components/chat/typing-indicator"
import { ChatInput } from "@/components/chat/chat-input"
import { apiService } from "@/lib/api"

interface ChatClientPageProps {
  character: Character
}

export function ChatClientPage({ character }: ChatClientPageProps) {
  const backgroundStyle: React.CSSProperties | undefined = character.avatar
    ? {
        backgroundImage: `url(${character.avatar})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
      }
    : undefined;
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content: `–ü—Ä–∏–≤–µ—Ç! –Ø ${character.name}, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫! üòä –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é?`,
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // const handleSend = async () => {
  //   if (!input.trim()) return

  //   const userMessage: Message = {
  //     id: Date.now().toString(),
  //     role: "user",
  //     content: input,
  //     timestamp: new Date(),
  //   }

  //   setMessages((prev) => [...prev, userMessage])
  //   setInput("")
  //   setIsTyping(true)

  //   // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
  //   setTimeout(() => {
  //     const responses = [
  //       "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ...",
  //       "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é...",
  //       "–°—É–ø–µ—Ä! üéâ –¢—ã –∑–∞–¥–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∑–≤–æ–ª—å –æ–±—ä—è—Å–Ω–∏—Ç—å...",
  //       "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üí° –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —ç—Ç–∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è...",
  //     ]

  //     const assistantMessage: Message = {
  //       id: (Date.now() + 1).toString(),
  //       role: "assistant",
  //       content: responses[Math.floor(Math.random() * responses.length)],
  //       timestamp: new Date(),
  //     }

  //     setMessages((prev) => [...prev, assistantMessage])
  //     setIsTyping(false)
  //   }, 1500)
  // }

  const handleSend = async () => {
    if (!input.trim()) return;
  
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date(),
    };
  
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsTyping(true);
  
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const history = messages.map(m => ({
        role: m.role,
        content: m.content
      }));
  
      const response = await apiService.sendMessage({
        characterId: character.id,
        message: input,
        history
      });
  
      if (response.success) {
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: response.response,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        const errorMessage: Message = {
          id: (Date.now() + 2).toString(),
          role: "assistant",
          content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑.",
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, errorMessage]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    } finally {
      setIsTyping(false);
    }
  };

  return (
    <div
      className="min-h-screen bg-gradient-light"
      style={backgroundStyle}
    >
      <ChatHeader character={character} />

      <div className="container mx-auto px-2 md:px-4 py-4 md:py-6 max-w-4xl">
        <div className="bg-white rounded-lg shadow-sm border border-brand-100 h-[calc(100vh-160px)] md:h-[calc(100vh-200px)] flex flex-col">
          <ChatCharacterInfo character={character} />

          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <ChatMessage key={message.id} message={message} character={character} />
            ))}

            {isTyping && <TypingIndicator character={character} />}

            <div ref={messagesEndRef} />
          </div>

          <ChatInput
            input={input}
            setInput={setInput}
            handleSend={handleSend}
            isTyping={isTyping}
            characterName={character.name}
          />
        </div>
      </div>
    </div>
  )
}
